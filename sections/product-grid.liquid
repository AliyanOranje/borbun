<style>
    .swatch-group {
    display: flex;
    gap: 8px;
    justify-content: center;
    flex-wrap: wrap;
  }     
  .swatch {
    width: 30px;
    height: 30px;
    border-radius: 9999px;
    border: 2px solid #ccc;
    cursor: pointer;
    position: relative;
  }
  .swatch.disabled {
    opacity: 0.4;
    pointer-events: none;
  }
  .swatch.selected {
    border: 2px solid black;
  }
<<<<<<< HEAD
  .custom-product-grid{
    background:red;
  }
=======
>>>>>>> development2
</style>
<product-wrapper>
    <product-card class="custom-product-grid grid grid-cols-2 md:grid-cols-4 gap-4">
    {% for block in section.blocks %}
        {% assign product = block.settings.product %}
        {% if product %}
        <div class="product-card text-center border p-4">
            <a href="{{ product.url }}">
            <img src="{{ product.featured_image | image_url: width: 400 }}" alt="{{ product.title }}" class="mb-2 mx-auto max-h-[200px]" />
            <h3 class="text-lg font-semibold">{{ product.title }}</h3>
            <p class="text-sm text-gray-600">{{ product.price | money }}</p>
            </a>

            {%- assign size_option_index = nil -%}
            {%- assign color_option_index = nil -%}
            {%- for option in product.options_with_values -%}
            {% if option.name == 'Size' %}
                {% assign size_option_index = forloop.index0 %}
            {% endif %}
            {% if option.name == 'Color' %}
                {% assign color_option_index = forloop.index0 %}
            {% endif %}
            {%- endfor -%}

            {% if size_option_index != nil %}
            <label for="size-{{ product.id }}" class="block mt-2 text-sm font-medium">Select Size:</label>
            <select id="size-{{ product.id }}" name="size" class="mt-1 w-full border p-1 rounded">
                {% assign seen_sizes = '' %}
                {% for variant in product.variants %}
                {% assign size_value = variant.options[size_option_index] %}
                {% unless seen_sizes contains size_value %}
                    <option value="{{ variant.id }}"
                            {% unless variant.available %}disabled{% endunless %}>
                    {{ size_value }}{% unless variant.available %} (Out of stock){% endunless %}
                    </option>
                    {% assign seen_sizes = seen_sizes | append: ',' | append: size_value | append: ',' %}
                {% endunless %}
                {% endfor %}
            </select>
            {% endif %}

            {%- if color_option_index != nil -%}
            <div class="mt-3">
                <label class="block text-sm font-medium">Select Color:</label>
                <div class="swatch-group mt-1">
                {% assign seen_colors = '' %}
                {% for variant in product.variants %}
                    {% assign color_value = variant.options[color_option_index] %}
                    {% unless seen_colors contains color_value %}
                    <div class="swatch {% unless variant.available %}disabled{% endunless %}" 
                        title="{{ color_value }}"
                        style="background-color: {{ color_value | downcase }};">
                    </div>
                    {% assign seen_colors = seen_colors | append: ',' | append: color_value | append: ',' %}
                    {% endunless %}
                {% endfor %}
                </div>
            </div>
            {%- endif -%}


            <form method="post" action="/cart/add">
                <input type="hidden" name="id" value="" class="variant-id-input">

                <button class="minusbtn" type="button">-</button>
                  <input type="number" class="product_quantity" value="1" min="1" readonly>
                <button class="plusbtn" type="button">+</button>

                <button type="submit" class="mt-3 bg-black text-white py-2 px-4 rounded hover:bg-gray-800 w-full add-to-cart-btn">
                    Add to Cart
                </button>

                <button type="submit" class="mt-3 bg-black text-white py-2 px-4 rounded hover:bg-gray-800 w-full remove-from-cart-btn">
                    Remove
                </button>
            </form>
        </div>
        {% endif %}
    {% endfor %}
    </product-card>
</product-wrapper>

<script>
  class ProductCardComponent extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      this.initProductCards();
    }

    initProductCards() {
      document.querySelectorAll('.product-card').forEach(card => {
        const productJsonUrl = card.querySelector('a').getAttribute('href') + '.js';
        let productData = null;
        let selectedSize = null;
        let selectedColor = null;

        const sizeSelect = card.querySelector('select[name="size"]');
        const colorSwatches = card.querySelectorAll('.swatch');
        const hiddenInput = card.querySelector('.variant-id-input');
        const addToCartBtn = card.querySelector('.add-to-cart-btn');

        fetch(productJsonUrl)
          .then(res => res.json())
          .then(data => {
            productData = data;
          });

        if (sizeSelect) {
          sizeSelect.addEventListener('change', e => {
            selectedSize = e.target.options[e.target.selectedIndex].text.replace(' (Out of stock)', '');
            updateVariantId();
          });
        }

        colorSwatches.forEach(swatch => {
          swatch.addEventListener('click', () => {
            colorSwatches.forEach(s => s.classList.remove('selected'));
            swatch.classList.add('selected');
            selectedColor = swatch.getAttribute('title');
            updateVariantId();
          });
        });

        function updateVariantId() {
          if (!productData) return;

          const matchingVariant = productData.variants.find(v => {
            const options = v.options;
            return options.includes(selectedSize) && options.includes(selectedColor);
          });

          if (matchingVariant) {
            hiddenInput.value = matchingVariant.id;
            addToCartBtn.disabled = false;
          } else {
            hiddenInput.value = '';
            addToCartBtn.disabled = true;
          }
        }

        card.querySelector('form').addEventListener('submit', function (e) {
          e.preventDefault();
          const variantId = hiddenInput.value;
<<<<<<< HEAD
          const quantityInput = card.querySelector('.product_quantity');
          const quantity = parseInt(quantityInput?.value) || 1;

          if (!variantId) return alert('Please select available options.');

          const isRemove = e.submitter?.classList.contains('remove-from-cart-btn');

          if (isRemove) {
            fetch('/cart/change.js', {
                method: 'POST',
                headers: {
                  'content-type': 'application/json',
                  'Accept': 'application/json'
                },
                body: JSON.stringify(
                  {id: variantId, quantity: 0
                })
            })
            .then(res => res.json())
            .then(data => {
              console.log('Remove from cart:', data);
              alert('Remove from cart!');
            })
            .catch(err => {
              console.error('Cart removal error:', err);
              alert('Cart removal error');
            });
          }
          else{
=======

          if (!variantId) return alert('Please select available options.');

>>>>>>> development2
          fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
<<<<<<< HEAD
            body: JSON.stringify({ id: variantId, quantity: quantity  })
=======
            body: JSON.stringify({ id: variantId, quantity: 1 })
>>>>>>> development2
          })
            .then(res => res.json())
            .then(data => {
              console.log('Added to cart:', data);
              alert('Added to cart!');
            })
            .catch(err => {
              console.error('Cart error:', err);
              alert('Error adding to cart');
            });
<<<<<<< HEAD
          }
=======
>>>>>>> development2
        });
      });
    }
  }

  customElements.define('product-wrapper', ProductCardComponent);
</script>



<script>
  document.querySelectorAll('.product-card').forEach(card => {
    const qtyinput = card.querySelector('.product_quantity');
    const plusbtn = card.querySelector('.plusbtn');
    const minusbtn = card.querySelector('.minusbtn');

    
        if (!qtyinput || !plusbtn || !minusbtn) return;
      
    plusbtn.addEventListener('click', (e) => {
      e.preventDefault();  
      qtyinput.value = parseInt(qtyinput.value) + 1;
    });


    minusbtn.addEventListener('click', (e) =>{
      e.preventDefault();
      const currentqty = parseInt(qtyinput.value);
      if (!isNaN(currentqty) && currentqty > 1){
        qtyinput.value = currentqty - 1;
      }
    })

    if(parseInt(qtyinput.value) <=0 ) {
      qtyinput.value = 1; 
    }
  });
</script>


{% schema %}
{
  "name": "Product Grid",
  "class": "section",
  "settings": [
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select Product"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Product Grid"
    }
  ]
}
{% endschema %}